gm$lambda
gm$gamma.pars[4]
gm$lambda
gm$gamma.pars[5]
gm$lambda
gm$gamma.pars
gm$lambda
gm$gamma.pars[1,]
gm$lambda
gm$gamma.pars[,1]
gm$lambda
gm$gamma.pars[,1]$alpha
gm$lambda
gm$gamma.pars[,1]
gm$lambda
gm$gamma.pars[,1][1]
pgammix <- function(x, mixture)  {
lambda <- mixture$lambda # mixng weights
k <- length(lambda) # number of clusters
pgamma.from.mix <- function(x, cluster) {
lambda[cluster] * dgamma(x, mixture$gamma.pars[,cluster][1], 1/mixture$gamma.pars[,cluster][2])
}
pgammas <- sapply(1:k, pgamm.from.mix, x= x)
return(rowSums(pgammas))
}
pgammix(sort(unique(oecdpanel$initgdp)), gm)
pgammix <- function(x, mixture)  {
lambda <- mixture$lambda # mixng weights
k <- length(lambda) # number of clusters
pgamma.from.mix <- function(x, cluster) {
lambda[cluster] * dgamma(x, mixture$gamma.pars[,cluster][1], 1/mixture$gamma.pars[,cluster][2])
}
pgammas <- sapply(1:k, pgamma.from.mix, x= x)
return(rowSums(pgammas))
}
pgammix(sort(unique(oecdpanel$initgdp)), gm)
# d3 <- function(x) g3$lambda[1]*dgamma(x, g3$gamma.pars[1], 1/g3$gamma.pars[2]) + g3$lambda[2]*dgamma(x, g3$gamma.pars[3], 1/g3$gamma.pars[4])
pgammix <- function(x, mixture)  {
lambda <- mixture$lambda # mixng weights
k <- length(lambda) # number of clusters
pgamma.from.mix <- function(x, cluster) {
lambda[cluster] * dgamma(x, mixture$gamma.pars[,cluster][1], 1/mixture$gamma.pars[,cluster][2])
}
pgammas <- sapply(1:k, pgamma.from.mix, x= x)
return(rowSums(pgammas))
}
gmix <- pgammix(sort(unique(oecdpanel$initgdp)), gm)
hist(gmix)
# d3 <- function(x) g3$lambda[1]*dgamma(x, g3$gamma.pars[1], 1/g3$gamma.pars[2]) + g3$lambda[2]*dgamma(x, g3$gamma.pars[3], 1/g3$gamma.pars[4])
pgammix <- function(x, mixture)  {
lambda <- mixture$lambda # mixng weights
k <- length(lambda) # number of clusters
pgamma.from.mix <- function(x, cluster) {
lambda[cluster] * dgamma(x, mixture$gamma.pars[,cluster][1], 1/mixture$gamma.pars[,cluster][2])
}
pgammas <- sapply(1:k, pgamma.from.mix, x= x)
return(rowSums(pgammas))
}
gmix <- pgammix(sort(unique(oecdpanel$initgdp)), gm)
hist(gmix)
hist(oecdpanel$initgdp)
# d3 <- function(x) g3$lambda[1]*dgamma(x, g3$gamma.pars[1], 1/g3$gamma.pars[2]) + g3$lambda[2]*dgamma(x, g3$gamma.pars[3], 1/g3$gamma.pars[4])
x <- seq(min(oecdpanel$initgdp), max(oecdpanel$initgdp))
x <- seq(min(oecdpanel$initgdp), max(oecdpanel$initgdp))
x
x <- seq(min(oecdpanel$initgdp), max(oecdpanel$initgdp), 0.001)
x
x <- seq(min(oecdpanel$initgdp), max(oecdpanel$initgdp), 0.001)
plot(x, pgammix(x))
x <- seq(min(oecdpanel$initgdp), max(oecdpanel$initgdp), 0.001)
plot(x, pgammix(x, gm))
x <- seq(min(oecdpanel$initgdp), max(oecdpanel$initgdp), 0.001)
plot(x, pgammix(x, gm))
hist(oecdpanel$initgdp, add = T, freq = F, breaks = 5)
x <- seq(min(oecdpanel$initgdp), max(oecdpanel$initgdp), 0.001)
plot(x, pgammix(x, gm))
hist(oecdpanel$initgdp, add = T, freq = F, breaks = 10)
x <- seq(min(oecdpanel$initgdp), max(oecdpanel$initgdp), 0.001)
plot(x, pgammix(x, gm))
hist(oecdpanel$initgdp, add = T, freq = F, breaks = 12)
x <- seq(min(oecdpanel$initgdp), max(oecdpanel$initgdp), 0.001)
plot(x, pgammix(x, gm))
hist(oecdpanel$initgdp, add = T, freq = F, breaks = 20)
x <- seq(min(oecdpanel$initgdp), max(oecdpanel$initgdp), 0.001)
plot(x, pgammix(x, gm))
hist(oecdpanel$initgdp, add = T, freq = F, breaks = 15)
x <- seq(min(oecdpanel$initgdp), max(oecdpanel$initgdp), 0.001)
plot(x, pgammix(x, gm))
hist(oecdpanel$initgdp, add = T, freq = F, breaks = 25)
x <- seq(min(oecdpanel$initgdp), max(oecdpanel$initgdp), 0.001)
plot(x, pgammix(x, gm),  "l")
hist(oecdpanel$initgdp, add = T, freq = F, breaks = 25)
pgammix <- function(x, mixture)  {
lambda <- mixture$lambda # mixng weights
k <- length(lambda) # number of clusters
pgamma.from.mix <- function(x, cluster) {
lambda[cluster] * dgamma(x, mixture$gamma.pars[,cluster][1], 1/mixture$gamma.pars[,cluster][2])
}
pgammas <- sapply(1:k, pgamma.from.mix, x= x)
return(rowSums(pgammas))
}
x <- seq(min(oecdpanel$initgdp), max(oecdpanel$initgdp), 0.001)
plot(x, pgammix(x, gm),  "l")
hist(oecdpanel$initgdp, add = T, freq = F, breaks = 25)
x <- seq(min(oecdpanel$initgdp), max(oecdpanel$initgdp), 0.001)
plot(x, pgammix(x, gm),  "l")
hist(oecdpanel$initgdp, add = T, freq = F, breaks = 30)
x <- seq(min(oecdpanel$initgdp), max(oecdpanel$initgdp), 0.001)
plot(x, pgammix(x, gm),  "l")
hist(oecdpanel$initgdp, add = T, freq = F, breaks = 20)
x <- seq(min(oecdpanel$initgdp), max(oecdpanel$initgdp), 0.001)
plot(x, pgammix(x, gm),  "l")
hist(oecdpanel$initgdp, add = T, freq = F, breaks = 15)
x <- seq(min(oecdpanel$initgdp), max(oecdpanel$initgdp), 0.001)
plot(x, pgammix(x, gm),  "l")
hist(oecdpanel$initgdp, add = T, freq = F, breaks = 16)
x <- seq(min(oecdpanel$initgdp), max(oecdpanel$initgdp), 0.001)
plot(x, pgammix(x, gm),  "l")
hist(oecdpanel$initgdp, add = T, freq = F, breaks = 17)
x <- seq(min(oecdpanel$initgdp), max(oecdpanel$initgdp), 0.01)
plot(x, pgammix(x, gm),  "l")
hist(oecdpanel$initgdp, add = T, freq = F, breaks = 17)
x <- seq(min(oecdpanel$initgdp), max(oecdpanel$initgdp), 0.1)
plot(x, pgammix(x, gm),  "l")
hist(oecdpanel$initgdp, add = T, freq = F, breaks = 17)
x <- seq(min(oecdpanel$initgdp), max(oecdpanel$initgdp), 0.001)
plot(x, pgammix(x, gm),  "l")
hist(oecdpanel$initgdp, add = T, freq = F, breaks = 17)
x <- seq(min(oecdpanel$initgdp), max(oecdpanel$initgdp), 0.001)
plot(x, pgammix(x, gm),  "l", col = "red")
hist(oecdpanel$initgdp, add = T, freq = F, breaks = 17)
x <- seq(min(oecdpanel$initgdp), max(oecdpanel$initgdp), 0.001)
plot(x, pgammix(x, gm),  "l", col = "hotpink")
hist(oecdpanel$initgdp, add = T, freq = F, breaks = 17)
x <- seq(min(oecdpanel$initgdp), max(oecdpanel$initgdp), 0.001)
plot(x, pgammix(x, gm),  "l", col = "hotpink")
hist(oecdpanel$initgdp, add = T, freq = F, breaks = 25)
x <- seq(min(oecdpanel$initgdp), max(oecdpanel$initgdp), 0.001)
plot(x, pgammix(x, gm),  "l", col = "hotpink")
hist(oecdpanel$initgdp, add = T, freq = F, breaks = 30)
x <- seq(min(oecdpanel$initgdp), max(oecdpanel$initgdp), 0.001)
plot(x, pgammix(x, gm),  "l", col = "hotpink")
hist(oecdpanel$initgdp, add = T, freq = F, breaks = 15)
npudens(~ oecdpanel$initgdp)
pgammix <- function(x, mixture)  {
lambda <- mixture$lambda # mixng weights
k <- length(lambda) # number of clusters
pgamma.from.mix <- function(x, cluster) {
lambda[cluster] * dgamma(x, mixture$gamma.pars[,cluster][1], 1/mixture$gamma.pars[,cluster][2])
}
pgammas <- sapply(1:k, pgamma.from.mix, x= x)
return(rowSums(pgammas))
}
loglike.gammamix <- function(x, mixture) {
loglike <- log(pgammix(x, mixture))
sum(loglike)
}
loglike.gammix(oecdpanel$initgdp, gm)
pgammix <- function(x, mixture)  {
lambda <- mixture$lambda # mixng weights
k <- length(lambda) # number of clusters
pgamma.from.mix <- function(x, cluster) {
lambda[cluster] * dgamma(x, mixture$gamma.pars[,cluster][1], 1/mixture$gamma.pars[,cluster][2])
}
pgammas <- sapply(1:k, pgamma.from.mix, x= x)
return(rowSums(pgammas))
}
loglike.gammamix <- function(x, mixture) {
loglike <- log(pgammix(x, mixture))
sum(loglike)
}
loglike.gammamix(oecdpanel$initgdp, gm)
pgammix <- function(x, mixture)  {
lambda <- mixture$lambda # mixng weights
k <- length(lambda) # number of clusters
pgamma.from.mix <- function(x, cluster) {
lambda[cluster] * dgamma(x, mixture$gamma.pars[,cluster][1], 1/mixture$gamma.pars[,cluster][2])
}
pgammas <- sapply(1:k, pgamma.from.mix, x= x)
return(rowSums(pgammas))
}
loglike.gammamix <- function(x, mixture) {
loglike <- log(pgammix(x, mixture))
sum(loglike)
}
loglike.gammamix(oecdpanel$initgdp, gm)
summary(gm)
pgammix <- function(x, mixture)  {
lambda <- mixture$lambda # mixng weights
k <- length(lambda) # number of clusters
pgamma.from.mix <- function(x, cluster) {
lambda[cluster] * dgamma(x, mixture$gamma.pars[,cluster][1], 1/mixture$gamma.pars[,cluster][2])
}
pgammas <- sapply(1:k, pgamma.from.mix, x= x)
return(rowSums(pgammas))
}
loglike.gammamix <- function(x, mixture) {
loglike <- log(pgammix(x, mixture))
sum(loglike)
}
loglike.gammamix(oecdpanel$initgdp, gm)
gm$loglik
loglike.gammamix(oecdpanel$initgdp, gm)
gm$loglik # both batch, so this is correct
loglike.gammamix(oecdpanel$initgdp, gm)
gm$loglik # both batch, so this is correct
loglike.gammamix(oecdpanel$initgdp, gm)
gm$loglik # both batch, so this is correct
#cross validation
# split half into train, half into test.
train <- sample(1:length(oecdpanel$initgdp))
loglike.gammamix(oecdpanel$initgdp, gm)
gm$loglik # both batch, so this is correct
#cross validation
# split half into train, half into test.
train <- sample(1:length(oecdpanel$initgdp))
tarin
loglike.gammamix(oecdpanel$initgdp, gm)
gm$loglik # both batch, so this is correct
#cross validation
# split half into train, half into test.
train <- sample(1:length(oecdpanel$initgdp))
train
loglike.gammamix(oecdpanel$initgdp, gm)
gm$loglik # both batch, so this is correct
#cross validation
# split half into train, half into test.
train <- sample(1:length(oecdpanel$initgdp))
loglike.gammamix(oecdpanel$initgdp, gm)
gm$loglik # both batch, so this is correct
#cross validation
# split half into train, half into test.
points <- sample(1:length(oecdpanel$initgdp))
loglike.gammamix(oecdpanel$initgdp, gm)
gm$loglik # both batch, so this is correct
#cross validation
n <- length(oecdpanel$initgdp)
# split half into train, half into test.
points <- sample(1:n)
train <- points[1:floor(n/2)]
test <- points[-(1:floor(n/2))]
points <- sample(1:n)
train <- points[1:floor(n/2)]
test <- points[-(1:floor(n/2))] # second half for testing
gm = gammamixEM(oecdpanel$initgdp, k= 3)
points <- sample(1:n)
train <- points[1:floor(n/2)]
test <- points[-(1:floor(n/2))] # second half for testing
gm = gammamixEM(oecdpanel$initgdp[train], k= 3)
log_lik = loglike.gammamix(oecdpanel$initgdp[test],gm)
points <- sample(1:n)
train <- points[1:floor(n/2)]
test <- points[-(1:floor(n/2))] # second half for testing
gm = gammamixEM(oecdpanel$initgdp[train], k= 3)
log_lik = loglike.gammamix(oecdpanel$initgdp[test],gm)
log_like
points <- sample(1:n)
train <- points[1:floor(n/2)]
test <- points[-(1:floor(n/2))] # second half for testing
gm = gammamixEM(oecdpanel$initgdp[train], k= 3)
log_lik = loglike.gammamix(oecdpanel$initgdp[test],gm)
log_lik
points <- sample(1:n)
train <- points[1:floor(n/2)]
test <- points[-(1:floor(n/2))] # second half for testing
gm = gammamixEM(oecdpanel$initgdp[train], k= 3)
log_lik = loglike.gammamix(oecdpanel$initgdp[test],gm)
log_lik
points <- sample(1:n)
train <- points[1:floor(n/2)]
test <- points[-(1:floor(n/2))] # second half for testing
gm = gammamixEM(oecdpanel$initgdp[train], k= 3)
log_lik = loglike.gammamix(oecdpanel$initgdp[test],gm)
log_lik
points <- sample(1:n)
train <- points[1:floor(n/2)]
test <- points[-(1:floor(n/2))] # second half for testing
gm = gammamixEM(oecdpanel$initgdp[train], k= 3)
log_lik = loglike.gammamix(oecdpanel$initgdp[test],gm)
log_lik
points <- sample(1:n)
train <- points[1:floor(n/2)]
test <- points[-(1:floor(n/2))] # second half for testing
gm = gammamixEM(oecdpanel$initgdp, k= 3)
log_lik = loglike.gammamix(oecdpanel$initgdp,gm)
log_lik
points <- sample(1:n)
train <- points[1:floor(n/2)]
test <- points[-(1:floor(n/2))] # second half for testing
gm = gammamixEM(oecdpanel$initgdp[train], k= 3)
log_lik = loglike.gammamix(oecdpanel$initgdp[test],gm)
log_lik
points <- sample(1:n)
train <- points[1:floor(n/2)]
test <- points[-(1:floor(n/2))] # second half for testing
gm = gammamixEM(oecdpanel$initgdp[train], k= 3)
log_lik = loglike.gammamix(oecdpanel$initgdp[test],gm)
log_lik
points <- sample(1:n)
train <- points[1:floor(n/2)]
test <- points[-(1:floor(n/2))] # second half for testing
gm = gammamixEM(oecdpanel$initgdp[train], k= 3)
log_lik = loglike.gammamix(oecdpanel$initgdp[test],gm)
log_lik
points <- sample(1:n)
train <- points[1:floor(n/2)]
test <- points[-(1:floor(n/2))] # second half for testing
gm = gammamixEM(oecdpanel$initgdp[train], k= 3)
log_lik = loglike.gammamix(oecdpanel$initgdp[test],gm)
log_lik
points <- sample(1:n)
train <- points[1:floor(n/2)]
test <- points[-(1:floor(n/2))] # second half for testing
gm = gammamixEM(oecdpanel$initgdp[train], k= 3)
log_lik = loglike.gammamix(oecdpanel$initgdp[test],gm)
log_lik
points <- sample(1:n)
train <- points[1:floor(n/2)]
test <- points[-(1:floor(n/2))] # second half for testing
gm = gammamixEM(oecdpanel$initgdp, k= 3)
log_lik = loglike.gammamix(oecdpanel$initgdp[test],gm)
log_lik
points <- sample(1:n)
train <- points[1:floor(n/2)]
test <- points[-(1:floor(n/2))] # second half for testing
gm = gammamixEM(oecdpanel$initgdp[train], k= 3)
log_lik = loglike.gammamix(oecdpanel$initgdp,gm)
log_lik
points <- sample(1:n)
train <- points[1:floor(n/2)]
test <- points[-(1:floor(n/2))] # second half for testing
gm = gammamixEM(oecdpanel$initgdp[train], k= 3)
log_lik = loglike.gammamix(oecdpanel$initgdp[test],gm)
log_lik
points <- sample(1:n)
train <- points[1:floor(n/2)]
test <- points[-(1:floor(n/2))] # second half for testing
gm = gammamixEM(oecdpanel$initgdp[train], k= 3)
log_lik = loglike.gammamix(oecdpanel$initgdp[train],gm)
log_lik
points <- sample(1:n)
train <- points[1:floor(n/2)]
test <- points[-(1:floor(n/2))] # second half for testing
gm = gammamixEM(oecdpanel$initgdp[train], k= 3)
gamma_log_lik = loglike.gammamix(oecdpanel$initgdp[train],gm)
gamma_log_lik
points <- sample(1:n)
train <- points[1:floor(n/2)]
test <- points[-(1:floor(n/2))] # second half for testing
gm = gammamixEM(oecdpanel$initgdp[train], k= 3)
gamma_log_lik = loglike.gammamix(oecdpanel$initgdp[train],gm)
gamma_log_lik
nonparm <-  npudens(~ oecdpanel$initgdp)
predict(nonparm)
predict(nonparm, newdata = oecdpanel$initgdp[test])
predict(nonparm,oecdpanel$initgdp[test])
help(npudens)
predict(nonparm, newdata = data.frame(oecdpanel$initgdp[test]))
# predict(nonparm, newdata = data.frame(oecdpanel$initgdp[test]))
npudens(~ oecdpanel$initgdp[train])
# predict(nonparm, newdata = data.frame(oecdpanel$initgdp[test]))
npudens(~ oecdpanel$initgdp[train], newdata = data.frame(oecdpanel$initgd$test))
# predict(nonparm, newdata = data.frame(oecdpanel$initgdp[test]))
npudens(~ oecdpanel$initgdp[train], newdata = data.frame(oecdpanel$initgd[test]))
points <- sample(1:n)
train <- points[1:floor(n/2)]
test <- points[-(1:floor(n/2))] # second half for testing
gm = gammamixEM(oecdpanel$initgdp[train], k= 3)
gamma_log_lik = loglike.gammamix(oecdpanel$initgdp[train],gm)
gamma_log_lik
npudens(~ oecdpanel$initgdp[train], newdata = data.frame(oecdpanel$initgd[test]))
library(np)
data(oecdpanel)
n = nrow(oecdpanel)
summary(oecdpanel)
head(oecdpanel, 3)
pairs(oecdpanel)
Model0 = lm(growth~., data=oecdpanel)
summary(Model0)
res = resid(Model0)
par(mfrow=c(2,3))
plot(oecdpanel$oecd, res)
abline(h=0)
plot(oecdpanel$year, res)
abline(h=0)
plot(oecdpanel$initgdp, res)
abline(h=0)
plot(oecdpanel$popgro, res)
abline(h=0)
plot(oecdpanel$inv, res)
abline(h=0)
plot(oecdpanel$humancap, res)
abline(h=0)
Model1 = step(Model0, direction="backward", k=log(n), trace=0)
library(mgcv)
Model2 = gam(growth ~ s(year, k=4) + s(inv), data=oecdpanel)
anova(Model1, Model2, test="F")
vis.gam(Model2, plot.type="contour", theta=45, color="cm")
plot(Model2, se=T, scale = 0, pages=1, all.terms=T)
h = apply(oecdpanel[,c(3,6)],2,sd)/nrow(oecdpanel)^0.2
Model3 = npreg(growth~year+inv, data=oecdpanel, bws=h)
plot(Model3, view="fixed", theta=100)
anova(Model1, Model2, Model3, test="F")
summary(model3)
plot(model3$mean,residuals(model3))
plot(model3, view = "fixed", theta = 100)
# plot(model3$mean, m3_resids, xlab = "fitted values" , ylab = "residuals")
n.4 = 88
x.1970 = oecdpanel[oecdpanel$year==1970,]
x.1990 = oecdpanel[oecdpanel$year==1990,]
x.1970.66 = oecdpanel[oecdpanel$year==1970,]
x.1970.66$inv = x.1970.66$inv + 0.66
x.1990.66 = oecdpanel[oecdpanel$year==1990,]
x.1990.66$inv = x.1990.66$inv + 0.66
#1970, Model1
y.1970.1 = predict(Model1, newdata=x.1970)
y.1970.66.1 = predict(Model1, newdata=x.1970.66)
#1970, Model3
y.1970.3 = predict(Model3, newdata=x.1970)
y.1970.66.3 = predict(Model3, newdata=x.1970.66)
#1990, Model1
y.1990.1 = predict(Model1, newdata=x.1990)
y.1990.66.1 = predict(Model1, newdata=x.1990.66)
#1990, Model3
y.1990.3 = predict(Model3, newdata=x.1990)
y.1990.66.3 = predict(Model3, newdata=x.1990.66)
diff.mat = matrix(nrow=2, ncol=2)
colnames(diff.mat) = c("1970", "1990")
rownames(diff.mat) = c("Model 1", "Model 3")
diff.mat[1,1] = mean(y.1970.1) - mean(y.1970.66.1)
diff.mat[2,1] = mean(y.1970.3) - mean(y.1970.66.3)
diff.mat[1,2] = mean(y.1990.1) - mean(y.1990.66.1)
diff.mat[2,2] = mean(y.1990.3) - mean(y.1990.66.3)
diff.mat
n = 88
se.mat = matrix(nrow=2, ncol=2)
colnames(se.mat) = c("1970", "1990")
rownames(se.mat) = c("Model 1", "Model 3")
se.mat[1,1] = sd(y.1970.1-y.1970.66.1)/sqrt(n)
se.mat[1,2] = sd(y.1970.3-y.1970.66.3)/sqrt(n)
se.mat[2,1] = sd(y.1990.1-y.1990.66.1)/sqrt(n)
se.mat[2,2] = sd(y.1990.3-y.1990.66.3)/sqrt(n)
se.mat
# model 2 differences
model3_1970 <- predict(model3, newdata = oecdpanel[oecdpanel$year==1970,])
mean(model2_1970)
model3_1970_66 <- predict(model3, newdata = oecdpanel_66[oecdpanel_66$year==1970,])
mean(model2_1970_66)
model3_1990 <- predict(model3, newdata = oecdpanel[oecdpanel$year==1990,])
mean(model2_1990)
model3_1990_66 <- predict(model3, newdata = oecdpanel_66[oecdpanel_66$year==1990,])
mean(model3_1990_66)
# model 2 differences
model3_1970 <- predict(model3, newdata = oecdpanel[oecdpanel$year==1970,])
mean(model3_1970)
model3_1970_66 <- predict(model3, newdata = oecdpanel_66[oecdpanel_66$year==1970,])
mean(model3_1970_66)
model3_1990 <- predict(model3, newdata = oecdpanel[oecdpanel$year==1990,])
mean(model3_1990)
model3_1990_66 <- predict(model3, newdata = oecdpanel_66[oecdpanel_66$year==1990,])
mean(model3_1990_66)
# model 3 differences
model3_1970 <- predict(model3, newdata = oecdpanel[oecdpanel$year==1970,])
mean(model3_1970)
model3_1970_66 <- predict(model3, newdata = oecdpanel_66[oecdpanel_66$year==1970,])
mean(model3_1970_66)
model3_1990 <- predict(model3, newdata = oecdpanel[oecdpanel$year==1990,])
mean(model3_1990)
model3_1990_66 <- predict(model3, newdata = oecdpanel_66[oecdpanel_66$year==1990,])
mean(model3_1990_66)
diff <- matrix(nrow = 2, ncol = 2)
dif[1,1] = mean(model1_1970) - mean(model1_1970_66)
diff <- matrix(nrow = 2, ncol = 2)
diff[1,1] = mean(model1_1970) - mean(model1_1970_66)
diff[2,1] = mean(model3_1970) - mean(model3_1970_66)
diff[1,2] = mean(model1_1990) - mean(model1_1990_66)
diff[2,2] = mean(model3_1990) - mean(model3_1990_66)
diff <- matrix(nrow = 2, ncol = 2)
colnames(diff) <- c("model1", "model3")
rownames(diff) <- c("1970", "1990")
diff[1,1] = mean(model1_1970) - mean(model1_1970_66)
diff[2,1] = mean(model3_1970) - mean(model3_1970_66)
diff[1,2] = mean(model1_1990) - mean(model1_1990_66)
diff[2,2] = mean(model3_1990) - mean(model3_1990_66)
diff <- matrix(nrow = 2, ncol = 2)
colnames(diff) <- c("model1", "model3")
rownames(diff) <- c("1970", "1990")
diff[1,1] = mean(model1_1970) - mean(model1_1970_66)
diff[2,1] = mean(model3_1970) - mean(model3_1970_66)
diff[1,2] = mean(model1_1990) - mean(model1_1990_66)
diff[2,2] = mean(model3_1990) - mean(model3_1990_66)
diff
n = 88
error = matrix(nrow=2, ncol=2)
colnames(error) = c("1970", "1990")
rownames(error) = c("Model 1", "Model 3")
error[1,1] = sd(model1_1970-model1_1970_66)/sqrt(n)
error[1,2] = sd(model3_1970-model3_1970_66)/sqrt(n)
error[2,1] = sd(model1_1990-model1_1990_66)/sqrt(n)
error[2,2] = sd(model3_1990-model3_1990_66)/sqrt(n)
n = 88
error = matrix(nrow=2, ncol=2)
colnames(error) = c("1970", "1990")
rownames(error) = c("Model 1", "Model 3")
error[1,1] = sd(model1_1970-model1_1970_66)/sqrt(n)
error[1,2] = sd(model3_1970-model3_1970_66)/sqrt(n)
error[2,1] = sd(model1_1990-model1_1990_66)/sqrt(n)
error[2,2] = sd(model3_1990-model3_1990_66)/sqrt(n)
error
library(shiny)
runApp(~/desktop/rough_draft/interactive)
runApp("~/desktop/rough_draft/interactive")
