map <- get_map(location = 'United States', zoom = 4)
ggmap(map) +geom_point(aes(x = lon, y = lat), data = schools)
schools <- dplyr::select(data,
UNITID,
INSTNM,
CITY,
STABBR,
ZIP,
PREDDEG,
ST_FIPS,
CURROPER,
CONTROL, #college type
GRAD_DEBT_MDN,
MD_EARN_WNE_P10,
TUITIONFEE_IN,
LATITUDE,
LONGITUDE,
GRAD_DEBT_MDN)
schools$LATITUDE
schools$LONGITUDE
typeof(schools$LONGITUDE)
schools <- filter(schools,
PREDDEG ==3 &
CURROPER == 1 &
is.na(TUITIONFEE_IN) == FALSE &
is.na(LATITUDE) ==FALSE &
is.na(LONGITUDE) == FALSE &
is.na(GRAD_DEBT_MDN) ==FALSE)
# is.na(MD_EARN_WNE_P10) ==FALSE)# &
# MD_EARN_WNE_P10!='NULL'                  )
# LATITUDE > 20 & LATITUDE < 50 &
# LONGITUDE >(-130) & LONGITUDE<(-60))
schools$LATITUDE = as.numeric(schools$LATITUDE)
schools$LONGITUDE = as.numeric(schools$LONGITUDE)
schools$CONTROl = as.factor(schools$CONTROL)
typeof(schools$LATITUDE)
library(ggmap)
map <- get_map(location = 'United States', zoom = 4)
length(schools$LONGITUDE)
length(schools$LATITUDE)
library(ggmap)
map <- get_map(location = 'United States', zoom = 4)
library(ggmap)
# map <- get_map(location = 'United States', zoom = 4)
geom_point(aes(x = LONGITUDE, y = LATITUDE), data = schools)
library(ggmap)
map <- get_map(location = 'United States', zoom = 4)
ggmap(map) + geom_point(aes(x = LONGITUDE, y = LATITUDE), data = schools)
library(ggmap)
map <- get_map(location = 'United States', zoom = 4)
ggmap(map) + geom_point(aes(x = LONGITUDE, y = LATITUDE, size =TUITIONFEE_IN ), data = schools)
schools <- filter(schools,
PREDDEG ==3 &
CURROPER == 1 &
is.na(TUITIONFEE_IN) == FALSE &
is.na(LATITUDE) ==FALSE &
is.na(LONGITUDE) == FALSE &
is.na(GRAD_DEBT_MDN) ==FALSE)
# is.na(MD_EARN_WNE_P10) ==FALSE)# &
# MD_EARN_WNE_P10!='NULL'                  )
# LATITUDE > 20 & LATITUDE < 50 &
# LONGITUDE >(-130) & LONGITUDE<(-60))
schools$LATITUDE = as.numeric(schools$LATITUDE)
schools$LONGITUDE = as.numeric(schools$LONGITUDE)
schools$TUITIONFEE_IN = as.numeric(schools$TUITIONFEE_IN)
schools$CONTROl = as.factor(schools$CONTROL)
schools$TUITIONFEE_IN
library(ggmap)
map <- get_map(location = 'United States', zoom = 4)
ggmap(map) + geom_point(aes(x = LONGITUDE, y = LATITUDE, size =TUITIONFEE_IN ), data = na.omit(schools))
library(ggmap)
map <- get_map(location = 'United States', zoom = 4)
ggmap(map) + geom_point(aes(x = LONGITUDE, y = LATITUDE, color =TUITIONFEE_IN ), data = na.omit(schools))
schools$MD_EARN_WNE_P10
schools$GRAD_DEBT_MDN
schools <- filter(schools,
PREDDEG ==3 &
CURROPER == 1 &
is.na(TUITIONFEE_IN) == FALSE &
is.na(LATITUDE) ==FALSE &
is.na(LONGITUDE) == FALSE &
is.na(GRAD_DEBT_MDN) ==FALSE)
# is.na(MD_EARN_WNE_P10) ==FALSE)# &
# MD_EARN_WNE_P10!='NULL'                  )
# LATITUDE > 20 & LATITUDE < 50 &
# LONGITUDE >(-130) & LONGITUDE<(-60))
schools$LATITUDE = as.numeric(schools$LATITUDE)
schools$LONGITUDE = as.numeric(schools$LONGITUDE)
schools$TUITIONFEE_IN = as.numeric(schools$TUITIONFEE_IN)
schools$CONTROl = as.factor(schools$CONTROL)
schools$GRAD_DEBT_MDN = as.numeric(schools$GRAD_DEBT_MDN)
library(ggmap)
map <- get_map(location = 'United States', zoom = 4)
library(ggmap)
map <- get_map(location = 'United States', zoom = 4)
library(ggmap)
map <- get_map(location = 'United States', zoom = 4)
library(ggmap)
map <- get_map(location = 'United States', zoom = 4)
library(ggmap)
map <- get_map(location = 'United States', zoom = 4)
# ggmap(map) + geom_point(aes(x = LONGITUDE, y = LATITUDE, color =TUITIONFEE_IN ), data = na.omit(schools))
ggmap(map) + geom_point(aes(x = LONGITUDE, y = LATITUDE, color =TUITIONFEE_IN ), data = na.omit(schools))
schools <- dplyr::select(data,
UNITID,
INSTNM,
CITY,
STABBR,
ZIP,
PREDDEG,
ST_FIPS,
CURROPER,
CONTROL, #college type
GRAD_DEBT_MDN,
MD_EARN_WNE_P10, #median earnings
TUITIONFEE_IN,
LATITUDE,
LONGITUDE,
C150_4,
GRAD_DEBT_MDN)
typeof(data$C150_4)
schools <- filter(schools,
PREDDEG ==3 &
CURROPER == 1 &
is.na(TUITIONFEE_IN) == FALSE &
is.na(LATITUDE) ==FALSE &
is.na(LONGITUDE) == FALSE &
is.na(GRAD_DEBT_MDN) ==FALSE)
# is.na(MD_EARN_WNE_P10) ==FALSE)# &
# MD_EARN_WNE_P10!='NULL'                  )
# LATITUDE > 20 & LATITUDE < 50 &
# LONGITUDE >(-130) & LONGITUDE<(-60))
schools$LATITUDE = as.numeric(schools$LATITUDE)
schools$LONGITUDE = as.numeric(schools$LONGITUDE)
schools$TUITIONFEE_IN = as.numeric(schools$TUITIONFEE_IN)
schools$CONTROl = as.factor(schools$CONTROL)
schools$GRAD_DEBT_MDN = as.numeric(schools$GRAD_DEBT_MDN)
schools$C150_4 = as.numeric(schools$C150_4)
schools$C150_4
schools <- dplyr::select(data,
UNITID,
INSTNM,
CITY,
STABBR,
ZIP,
PREDDEG,
ST_FIPS,
CURROPER,
CONTROL, #college type
GRAD_DEBT_MDN,
MD_EARN_WNE_P10, #median earnings
TUITIONFEE_IN,
LATITUDE,
LONGITUDE,
ADM_RATE,
C150_4, #4 year completion rate
GRAD_DEBT_MDN)
schools <- filter(schools,
PREDDEG ==3 &
CURROPER == 1 &
is.na(TUITIONFEE_IN) == FALSE &
is.na(LATITUDE) ==FALSE &
is.na(LONGITUDE) == FALSE &
is.na(GRAD_DEBT_MDN) ==FALSE)
# is.na(MD_EARN_WNE_P10) ==FALSE)# &
# MD_EARN_WNE_P10!='NULL'                  )
# LATITUDE > 20 & LATITUDE < 50 &
# LONGITUDE >(-130) & LONGITUDE<(-60))
schools$LATITUDE = as.numeric(schools$LATITUDE)
schools$LONGITUDE = as.numeric(schools$LONGITUDE)
schools$TUITIONFEE_IN = as.numeric(schools$TUITIONFEE_IN)
schools$CONTROl = as.factor(schools$CONTROL)
schools$GRAD_DEBT_MDN = as.numeric(schools$GRAD_DEBT_MDN)
schools$C150_4 = as.numeric(schools$C150_4)
schools$ADM_RATE = as.numeric(ADM_RATE)
schools$ADM
schools$ADM_RATE
ggplot(schools, aes(x = ADM_RATE, y = C150_4)) + geom_point()
ggplot(na.omit(schools), aes(x = ADM_RATE, y = C150_4)) + geom_point()
shinyApp()
df = read.csv("undergrad.csv")
scorecard_data <- read.csv("~/Most_Recent_Cohorts.csv", stringsAsFactors = FALSE)
df
undergrad_table = df %>% select(., College = college, State = state,
`Admission Rate` = adm_rate, `Average Total Cost` = avg_cost,
`Average Tuition` = avg_tuition, `Student Population` = population,
`Students With Loans` = pct_loan, `Median Debt` = md_debt,
`Median Earnings` = md_earnings_10, `Comp Sci Majors` = comp_deg,
`Math Majors` = math_deg)
undergrad_tablq
undergrad_table
undergrad_table = df %>% select(., College = college, State = state,
`Admission Rate` = adm_rate, `Average Total Cost` = avg_cost,
`Average Tuition` = avg_tuition, `Student Population` = population,
`Students With Loans` = pct_loan, `Median Debt` = md_debt,
`Median Earnings` = md_earnings_10, `Comp Sci Majors` = comp_deg,
`Math Majors` = math_deg, `Engineering Majors` = eng_deg)
undergrad_table
ggplot(undergrad_table, aes(x = Meadian Earnings))
ggplot(undergrad_table, aes(x = "Median Earnings"))
df
ggplot(df, aes(x = md_earnings_10, y = avg_cost  )) + geom_point()
ggplot(df, aes(x = md_earnings_10, y = avg_cost  )) + geom_text(aes(college))
ggplot(df, aes(x = md_earnings_10, y = avg_cost  )) + geom_point()
subset(df, adm_rate < 0.5)
df$adm_rate = as.numeric(df$adm_rate)
subset(df, adm_rate < 0.5)
subset(df, adm_rate < 0.5)
df$adm_rate = as.numeric(df$adm_rate)
help(subset)
subset(df, df$adm_rate < 0.5)
df %>% filter(., adm_rate <.5)
df
df %>% filter(., adm_rate <.5)
df
df$adm_rate_all = as.numeric(df$adm_rate_all)
df %>% filter(., adm_rate <.5)
df
df$adm_rate_all = as.numeric(df$adm_rate_all)
df %>% filter(., adm_rate_all <.5)
df = read.csv("undergrad.csv")
undergrad_table = df %>% select(., College = college, State = state,
`Admission_Rate` = adm_rate, `Average_Total_Cost` = avg_cost,
`Average_Tuition` = avg_tuition, `Student Population` = population,
`Students_With_Loans` = pct_loan, `Median Debt` = md_debt,
`Median_Earnings` = md_earnings_10, `Comp Sci_Majors` = comp_deg,
`Math_Majors` = math_deg, `Engineering_Majors` = eng_deg)
ggplot(df, aes(x = md_earnings_10, y = avg_cost  )) + geom_point()
df
# df$adm_rate_all = as.numeric(df$adm_rate_all)
df %>% filter(., adm_rate_all <.5)
help(as.numeric)
df
df$adm_rate_all = as.numeric(df$adm_rate_all)
df %>% filter(., adm_rate_all <.5)
df
df
df$adm_rate_all = as.numeric(df$adm_rate_all)/100
df %>% filter(., adm_rate_all <.5)
df
df
df$adm_rate_all = as.numeric(df$adm_rate_all)/100
df$adm_rate = as.numeric(df$adm_rate)
df %>% filter(., adm_rate_all <.5)
df
df = read.csv("undergrad.csv")
undergrad_table = df %>% select(., College = college, State = state,
`Admission_Rate` = adm_rate, `Average_Total_Cost` = avg_cost,
`Average_Tuition` = avg_tuition, `Student Population` = population,
`Students_With_Loans` = pct_loan, `Median Debt` = md_debt,
`Median_Earnings` = md_earnings_10, `Comp Sci_Majors` = comp_deg,
`Math_Majors` = math_deg, `Engineering_Majors` = eng_deg)
ggplot(df, aes(x = md_earnings_10, y = avg_cost  )) + geom_point()
df %>% filter(., adm_rate_all <.5)
df
# df$adm_rate_all = as.numeric(df$adm_rate_all)/100
# df$adm_rate = as.numeric(df$adm_rate)
df %>% filter(., adm_rate_all <.5)
df = read.csv("undergrad.csv")
undergrad_table = df %>% select(., College = college, State = state,
`Admission_Rate` = adm_rate, `Average_Total_Cost` = avg_cost,
`Average_Tuition` = avg_tuition, `Student Population` = population,
`Students_With_Loans` = pct_loan, `Median Debt` = md_debt,
`Median_Earnings` = md_earnings_10, `Comp Sci_Majors` = comp_deg,
`Math_Majors` = math_deg, `Engineering_Majors` = eng_deg)
ggplot(df, aes(x = md_earnings_10, y = avg_cost  )) + geom_point()
help("read.csv")
df = read.csv("undergrad.csv", stringsAsFactors =  False)
df = read.csv("undergrad.csv")
df = read.csv("undergrad.csv")
df
df = read.csv("undergrad.csv")
df$adm_rate = as.character(df$adm_rate)
df = read.csv("undergrad.csv")
df$adm_rate = as.character(df$adm_rate)
df
df = read.csv("undergrad.csv")
df$adm_rate = as.numeric(as.character(df$adm_rate))
df
# df$adm_rate_all = as.numeric(df$adm_rate_all)/100
# df$adm_rate = as.numeric(df$adm_rate)
df %>% filter(., adm_rate_all <.5)
# df$adm_rate_all = as.numeric(df$adm_rate_all)/100
# df$adm_rate = as.numeric(df$adm_rate)
df %>% filter(., adm_rate <.5)
help("filter")
library(dplyr)
shinyApp(
ui = fluidPage(
inputPanel(
sliderInput("acc_adjust", label = "Acceptance Rate:",
min = 0, max = 1, value = .5, step = 0.05),
#
# radioButtons("which_variable", label = "Which variable?",
#              choices = c("Eruption duration" = "eruptions",
#                          "Waiting time between eruptions" = "waiting")),
# checkboxInput("add_rug", label = "Add rug plot")
),
),
filtered_scatter = reactive({  #Create reactive element to filter data based on user inputs
scatter_data2 = df %>%
filter(.,
#Filter based on selected admission rate range
adm_rate <= input$acc_adjust
))
server = function(input, output) {
output$geyser_plot <- renderPlot({
p2 <- ggplot(filtered_scatter,
aes(x = md_earnings_10 , y =avg_cost ) +
geom_point()
p2
})
},
options = list(height = 600)
)
shinyApp(
ui = fluidPage(
inputPanel(
sliderInput("acc_adjust", label = "Acceptance Rate:",
min = 0, max = 1, value = .5, step = 0.05)
#
# radioButtons("which_variable", label = "Which variable?",
#              choices = c("Eruption duration" = "eruptions",
#                          "Waiting time between eruptions" = "waiting")),
# checkboxInput("add_rug", label = "Add rug plot")
),
plotOutput('earnings_plot')
),
#
# filtered_scatter <- df%>% filter(., adm_rate < input$acc_adjust),
server = function(input, output) {
filtered_scatter = reactive({
scatter = subset(df, adm_rate < input$acc_adjust)
#df %>% filter(., adm_rate <= input$acc_adjust)
return (scatter)
})
output$earnings_plot <- renderPlot({
p2 <- ggplot(filtered_scatter(),
aes(x = md_earnings_10 , y =avg_cost ) )+ geom_point() +labs(x= "median earnings 10 years after graduation", y = "average yearly cost", title = "post graduation earnings vs college cost, filtered by college selectivity")
p2
})
},
options = list(height = 600)
)
df
df
df
install.packages("rsconnect")
rsconnect
library(rsconnect)
rsconnect
rsconnect::setAccountInfo(name='edgar-eric-taylor-315',
token='FD27EA60E93C5B3A85DA9B3569560A3B',
secret='FOAIpJqCWovScoZXOAhACuzAh5/rKrnGURx88qq+')
library(plotly)
shinyApp(
ui = fluidPage(
inputPanel(
sliderInput("adm_rate", "Filter By Rate of Admissions", #add slider input for user to filter by admission rate
0, 1, value = c(0, 1), step = .05)
#
# radioButtons("which_variable", label = "Which variable?",
#              choices = c("Eruption duration" = "eruptions",
#                          "Waiting time between eruptions" = "waiting")),
# checkboxInput("add_rug", label = "Add rug plot")
),
plotlyOutput('earnings_plot')
#   inputPanel(
#     selectizeInput(inputId = "school_type",
#                                      label = "Filter By School Type",
#                                      choices = c('All','Public', 'Private Non-Profit', 'Private For-Profit'))
#   ),
#   plotlyOutput('school_type_plot')
),
#
server = function(input, output) {
df = read.csv("undergrad.csv")
df$adm_rate = as.numeric(as.character(df$adm_rate))
filtered_scatter = reactive({
scatter = subset(df, adm_rate >= input$adm_rate[1] & adm_rate <= input$adm_rate[2])
#df %>% filter(., adm_rate <= input$acc_adjust)
return (scatter)
})
#
# if (input$school_type == 'All') { #Filter based on selected school type (All, Public, Private, Non-Profit)
#   (df)
# } else if (input$school_type == 'Public') {
#   (df %>% filter(., school_type == "1"))
# } else if (input$school_type == 'Private Non-Profit') {
#   (df %>%  filter(., school_type == "2"))
# } else {
#   (df %>%  filter(., school_type == "3"))
# }
#
output$earnings_plot <- renderPlotly({
p2 <- ggplot(filtered_scatter(),
aes(x = md_earnings_10 , y =avg_cost, text = college ) )+ geom_point() +labs(x= "median earnings 10 years after graduation", y = "average yearly cost", title = "10 year earnings vs college cost, filtered by college selectivity")
ggplotly(p2)
})
# output$school_type_plot <- renderPlotly({
#
#   p3 <- ggplot(df, aes(x = avg_cost)) + geom_density(alpha = 0.3)
#   ggplotly(p3)
# })
},
options = list(height = 600)
)
rsconnect::deployApp('/Users/edgar/desktop/rough draft/interactive')
rsconnect::deployApp('/Users/edgar/desktop/rough draft/interactive')
runApp()
library(shiny)
runApp()
runApp('/Users/edgar/desktop/rough draft/interactive')
runApp('/Users/edgar/desktop/rough draft/interactive')
install.packages("shinydashboard")
install.packages('dashboardthemes')
runApp('/Users/edgar/desktop/rough draft/interactive')
runApp('/Users/edgar/desktop/rough draft/interactive')
install.packages("flexdashboard", type = "source")
runApp('/Users/edgar/desktop/rough draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('~/Desktop/rough_draft/interactive')
runApp('~/Desktop/rough_draft/interactive')
runApp('~/Desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
deployApp()
deployApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
deployApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
deployApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
deployApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
deployApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
deployApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
deployApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
library(shiny)
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
library(shiny)
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
runApp('/Users/edgar/desktop/rough_draft/interactive')
devtools::install_github('ropensci/plotly')
runApp('/Users/edgar/desktop/rough_draft/interactive')
library(shiny)
runApp('/Users/edgar/desktop/rough_draft/interactive')
